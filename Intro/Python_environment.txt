Why use a virtual environment in Python?
Imagine you're working on two separate Python projectsâ€”one requires a specific version of a library, while the other relies on a newer version. Without virtual environments, managing these dependencies could become a nightmare. Here's where virtual environments shine: they allow you to keep your projects isolated, ensuring that changes in one environment do not impact another.

By using virtual environments, you can:

Avoid conflicts between libraries and dependencies.

Test different versions of libraries without affecting your system-wide Python installation.

Maintain a clean and organized development environment.

Collaborate with others while ensuring consistent library versions.

# To specify the name of the python run time environment use 

#!/usr/bin/env 'environment-name' (without quots) 

that's called a shebang or hash bang command (Only use it if not using conda to manage env)

________________________________________________________________________________________________________________________________

________________________________________________________________________________________________________________________________


To create a virtual environment 

1) Using built-in module:

python -m venv "Environment-name"  (Don't use "")

to activate source "Environment-name"/bin/activate

and to deactivate use command : deactivate

2) Using virtualenv :

to install use command : pip3 install virtualenv (third-party packages)

to create use command virtualenv "Environment-name"

to activate source "Environment-name"/bin/activate

and to deactivate use command :  deactivate 

3) Using pyenv 

to install use command : curl https://pyenv.run | bash # on Linux
                         export PATH="$HOME/.pyenv/bin:$PATH"
                         eval "$(pyenv init --path)"
                         eval "$(pyenv virtualenv-init -)"

using pyenv install python
version for the environment using command : pyenv install "version"

to create virtual environment : pyenv virtualenv 3.9.5 "Environment-name" 

to activate use command :       pyenv activate "Environment-name"

and to activate use command :   pyenv deactivate

4) Uisng pipenv (dependency management tool):

to install use command : pip3 install pipenv 
                         pipenv --python "version"
                         pipenv shell

to deactivate pipenv shell : exit

5) Using conda :

to install add the update repo in linux using command : wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
                                                        bash Miniconda3-latest-Linux-x86_64.sh

to create virtual environment use command : conda create --name "Environment-name" python="version"

to activate use command : conda activate "Environment-name"

and to deactivate conda environment use command : conda deactivate 

________________________________________________________________________________________________________________________________

________________________________________________________________________________________________________________________________

To generate a txt file contaning packages in an environment

use command :

pip freeze > requirements.txt

and later install them in a new environment using

pip install -r requirements.txt

check on : https://www.coursera.org/learn/python-operating-system/supplement/t6Q5o/virtual-environments

________________________________________________________________________________________________________________________________

________________________________________________________________________________________________________________________________

Very important note : after activating conda environment if the terminal closes the terminal get's reverted into the (base) evn that could become an issue to

reslove that using command " nano ~/.bashrc " configure the terminal to open the desired environment 

by addeding the command " conda activate "Enviroment-name" " at the end of the .bashrc file for some linux distros it could be ~/.bash_profile 